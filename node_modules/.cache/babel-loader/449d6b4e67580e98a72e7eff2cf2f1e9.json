{"ast":null,"code":"var _jsxFileName = \"/Users/andreimihai/Documents/proiecteDiverse/proiecte/pathfinding-visualizer/src/Components/PathfindingVisualizer.jsx\";\nimport React, { Component } from \"react\";\nimport TNode from \"./TNode\";\nimport \"../grid.css\";\nimport \"../message.css\";\nlet isStart = true;\nlet isFinish = false;\nexport default class PathfindingVisualizer extends Component {\n  constructor() {\n    super();\n    this.state = {\n      grid: [],\n      startFinishIndexes: [],\n      message: \"choose start node\",\n      buttonIsActive: \"false\",\n      mouseIsPressed: false\n    };\n  }\n\n  componentDidMount() {\n    const grid = getGrid();\n    this.setState({\n      grid\n    });\n  }\n\n  onMouseDown(row, col) {\n    let indexesLength = this.state.startFinishIndexes.length;\n    if (indexesLength != 4) return;\n    const newGrid = getNewGrid(this.state.grid, row, col, \"isWall\");\n    this.setState({\n      grid: newGrid,\n      mouseIsPressed: true\n    });\n  }\n\n  onMouseEnter(row, col) {\n    let indexesLength = this.state.startFinishIndexes.length;\n    if (indexesLength != 4 && !this.state.mouseIsPressed) return;\n    const newGrid = getNewGrid(this.state.grid, row, col, \"isWall\");\n    this.setState({\n      grid: newGrid\n    });\n  }\n\n  onMouseUp() {\n    this.setState({\n      mouseIsPressed: false\n    });\n  }\n\n  onClick(row, col) {\n    if (isStart == true && isFinish == false) {\n      this.state.startFinishIndexes.push(row);\n      this.state.startFinishIndexes.push(col);\n      const newGrid = getNewGrid(this.state.grid, row, col, \"isStart\");\n      this.setState({\n        grid: newGrid\n      });\n      isStart = false;\n      isFinish = true;\n      this.state.message = \"choose finish node\";\n    } else if (isStart == false && isFinish) {\n      const node = this.state.grid[row][col];\n      this.state.message = \"put walls if you want to\";\n\n      if (!node.isStart) {\n        this.state.startFinishIndexes.push(row);\n        this.state.startFinishIndexes.push(col);\n        const newGrid = getNewGrid(this.state.grid, row, col, \"isFinish\");\n        this.setState({\n          grid: newGrid,\n          buttonIsActive: \"\"\n        });\n        isFinish = false;\n      }\n    } else {\n      let indexesLength = this.state.startFinishIndexes.length;\n      if (indexesLength != 4) return;\n      this.handleMouseDown(row, col);\n      this.handleMouseEnter(row, col);\n    }\n  }\n\n  render() {\n    const {\n      grid,\n      mouseIsPressed\n    } = this.state;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"message\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"code\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 11\n      }\n    }, this.state.message)), /*#__PURE__*/React.createElement(\"div\", {\n      disabled: this.state.buttonIsActive,\n      className: \"large blue button\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 9\n      }\n    }, \"get shortest path\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"grid\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 9\n      }\n    }, grid.map((row, rowIndex) => {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        key: rowIndex,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 15\n        }\n      }, row.map((node, nodeIndex) => {\n        const {\n          row,\n          col,\n          isStart,\n          isFinish,\n          isVisited,\n          isWall\n        } = node;\n        return /*#__PURE__*/React.createElement(TNode, {\n          key: nodeIndex,\n          row: row,\n          col: col,\n          isStart: isStart,\n          isFinish: isFinish,\n          isVisited: isVisited,\n          isWall: isWall,\n          mouseIsPressed: mouseIsPressed,\n          onClick: (row, col) => this.onClick(row, col),\n          onMouseDown: (row, col) => this.onMouseDown(row, col),\n          onMouseEnter: (row, col) => this.onMouseEnter(row, col),\n          onMouseUp: () => {\n            this.onMouseUp();\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 102,\n            columnNumber: 21\n          }\n        });\n      }));\n    })));\n  }\n\n}\n\nconst getGrid = () => {\n  const grid = [];\n\n  for (let i = 0; i < 20; i++) {\n    const currentRow = [];\n\n    for (let j = 0; j < 50; j++) {\n      currentRow.push(createNode(i, j));\n    }\n\n    grid.push(currentRow);\n  }\n\n  return grid;\n};\n\nconst createNode = (row, col) => {\n  return {\n    row: row,\n    col: col,\n    isStart: false,\n    isFinish: false,\n    isVisited: false,\n    isWall: false\n  };\n};\n\nconst getNewGrid = (grid, row, col, prop) => {\n  const newGrid = grid.slice();\n  const node = newGrid[row][col];\n  const newNode = { ...node\n  };\n  newNode[prop] = true;\n  newGrid[row][col] = newNode;\n  return newGrid;\n};","map":{"version":3,"sources":["/Users/andreimihai/Documents/proiecteDiverse/proiecte/pathfinding-visualizer/src/Components/PathfindingVisualizer.jsx"],"names":["React","Component","TNode","isStart","isFinish","PathfindingVisualizer","constructor","state","grid","startFinishIndexes","message","buttonIsActive","mouseIsPressed","componentDidMount","getGrid","setState","onMouseDown","row","col","indexesLength","length","newGrid","getNewGrid","onMouseEnter","onMouseUp","onClick","push","node","handleMouseDown","handleMouseEnter","render","map","rowIndex","nodeIndex","isVisited","isWall","i","currentRow","j","createNode","prop","slice","newNode"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport TNode from \"./TNode\";\nimport \"../grid.css\";\nimport \"../message.css\";\n\nlet isStart = true;\nlet isFinish = false;\n\nexport default class PathfindingVisualizer extends Component {\n  constructor() {\n    super();\n    this.state = {\n      grid: [],\n      startFinishIndexes: [],\n      message: \"choose start node\",\n      buttonIsActive: \"false\",\n      mouseIsPressed: false,\n    };\n  }\n\n  componentDidMount() {\n    const grid = getGrid();\n    this.setState({ grid });\n  }\n\n  onMouseDown(row, col) {\n    let indexesLength = this.state.startFinishIndexes.length;\n      if (indexesLength != 4) return;\n    const newGrid = getNewGrid(this.state.grid, row, col, \"isWall\");\n    this.setState({ grid: newGrid, mouseIsPressed: true });\n  }\n\n  onMouseEnter(row, col) {\n    let indexesLength = this.state.startFinishIndexes.length;\n    if (indexesLength != 4 && !this.state.mouseIsPressed) return;\n    const newGrid = getNewGrid(this.state.grid, row, col, \"isWall\");\n    this.setState({ grid: newGrid });\n  }\n\n  onMouseUp() {\n    this.setState({ mouseIsPressed: false });\n  }\n\n  onClick(row, col) {\n    if (isStart == true && isFinish == false) {\n      this.state.startFinishIndexes.push(row);\n      this.state.startFinishIndexes.push(col);\n\n      const newGrid = getNewGrid(this.state.grid, row, col, \"isStart\");\n      this.setState({ grid: newGrid });\n\n      isStart = false;\n      isFinish = true;\n      this.state.message = \"choose finish node\";\n    } else if (isStart == false && isFinish) {\n      const node = this.state.grid[row][col];\n      this.state.message = \"put walls if you want to\";\n\n      if (!node.isStart) {\n        this.state.startFinishIndexes.push(row);\n        this.state.startFinishIndexes.push(col);\n        const newGrid = getNewGrid(this.state.grid, row, col, \"isFinish\");\n        this.setState({ grid: newGrid, buttonIsActive: \"\" });\n        isFinish = false;\n      }\n    } else {\n      let indexesLength = this.state.startFinishIndexes.length;\n      if (indexesLength != 4) return;\n\n      this.handleMouseDown(row, col);\n      this.handleMouseEnter(row, col);\n    }\n  }\n\n  render() {\n    const { grid, mouseIsPressed } = this.state;\n\n    return (\n      <div>\n        <div className=\"message\">\n          <code>{this.state.message}</code>\n        </div>\n\n        <div disabled={this.state.buttonIsActive} className=\"large blue button\">\n          get shortest path\n        </div>\n\n        <div className=\"grid\">\n          {grid.map((row, rowIndex) => {\n            return (\n              <div key={rowIndex}>\n                {row.map((node, nodeIndex) => {\n                  const {\n                    row,\n                    col,\n                    isStart,\n                    isFinish,\n                    isVisited,\n                    isWall,\n                  } = node;\n                  return (\n                    <TNode\n                      key={nodeIndex}\n                      row={row}\n                      col={col}\n                      isStart={isStart}\n                      isFinish={isFinish}\n                      isVisited={isVisited}\n                      isWall={isWall}\n                      mouseIsPressed={mouseIsPressed}\n                      onClick={(row, col) => this.onClick(row, col)}\n                      onMouseDown={(row, col) =>\n                        this.onMouseDown(row, col)\n                      }\n                      onMouseEnter={(row, col) =>\n                        this.onMouseEnter(row, col)\n                      }\n                      onMouseUp={() => {\n                        this.onMouseUp();\n                      }}\n                    ></TNode>\n                  );\n                })}\n              </div>\n            );\n          })}\n        </div>\n      </div>\n    );\n  }\n}\n\nconst getGrid = () => {\n  const grid = [];\n\n  for (let i = 0; i < 20; i++) {\n    const currentRow = [];\n    for (let j = 0; j < 50; j++) {\n      currentRow.push(createNode(i, j));\n    }\n    grid.push(currentRow);\n  }\n\n  return grid;\n};\n\nconst createNode = (row, col) => {\n  return {\n    row: row,\n    col: col,\n    isStart: false,\n    isFinish: false,\n    isVisited: false,\n    isWall: false,\n  };\n};\n\nconst getNewGrid = (grid, row, col, prop) => {\n  const newGrid = grid.slice();\n  const node = newGrid[row][col];\n  const newNode = {\n    ...node,\n  };\n\n  newNode[prop] = true;\n  newGrid[row][col] = newNode;\n  return newGrid;\n};\n"]},"metadata":{},"sourceType":"module"}