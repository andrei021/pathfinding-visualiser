{"ast":null,"code":"var _jsxFileName = \"/Users/andreimihai/Documents/proiecteDiverse/proiecte/pathfinding-visualizer/src/Components/PathfindingVisualizer.jsx\";\nimport React, { Component } from \"react\";\nimport TNode from \"./TNode\";\nimport \"../grid.css\";\nlet isStart = true;\nlet isFinish = false;\nexport default class PathfindingVisualizer extends Component {\n  constructor() {\n    super();\n    this.state = {\n      grid: [],\n      startFinishIndexes: [] // mouseIsPressed: false\n\n    };\n  }\n\n  componentDidMount() {\n    const grid = getGrid();\n    this.setState({\n      grid\n    });\n  }\n\n  onClick(row, col) {\n    if (isStart == true && isFinish == false) {\n      const newGrid = getNewGrid(this.state.grid, row, col, isStart, isFinish);\n      this.setState({\n        grid: newGrid\n      });\n      isStart = false;\n      isFinish = true;\n    } else if (isStart == false && isFinish) {\n      const node = this.state.grid[row][col];\n\n      if (!node.isStart) {\n        const newGrid = getNewGrid(this.state.grid, row, col, isStart, isFinish);\n        this.setState({\n          grid: newGrid\n        });\n        isFinish = false;\n      }\n    }\n  }\n\n  render() {\n    const {\n      grid\n    } = this.state;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"grid\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 7\n      }\n    }, grid.map((row, rowIndex) => {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        key: rowIndex,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 13\n        }\n      }, row.map((node, nodeIndex) => {\n        const {\n          row,\n          col,\n          isStart,\n          isFinish,\n          isVisited\n        } = node;\n        return /*#__PURE__*/React.createElement(TNode, {\n          key: nodeIndex,\n          row: row,\n          col: col,\n          isStart: isStart,\n          isFinish: isFinish,\n          isVisited: isVisited,\n          onClick: (row, col) => this.onClick(row, col),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 50,\n            columnNumber: 19\n          }\n        });\n      }));\n    }));\n  }\n\n}\n\nconst getGrid = () => {\n  const grid = [];\n\n  for (let i = 0; i < 20; i++) {\n    const currentRow = [];\n\n    for (let j = 0; j < 50; j++) {\n      currentRow.push(createNode(i, j));\n    }\n\n    grid.push(currentRow);\n  }\n\n  return grid;\n};\n\nconst createNode = (row, col) => {\n  return {\n    row: row,\n    col: col,\n    isStart: false,\n    isFinish: false,\n    isVisited: false\n  };\n};\n\nconst getNewGrid = (grid, row, col, isStart, isFinish) => {\n  if (isStart) {\n    const newGrid = grid.slice();\n    const node = newGrid[row][col];\n    const newNode = { ...node,\n      isStart: isStart\n    };\n    newGrid[row][col] = newNode;\n    return newGrid;\n  }\n\n  if (isFinish) {\n    const newGrid = grid.slice();\n    const node = newGrid[row][col];\n    const newNode = { ...node,\n      isFinish: isFinish\n    };\n    newGrid[row][col] = newNode;\n    return newGrid;\n  }\n};","map":{"version":3,"sources":["/Users/andreimihai/Documents/proiecteDiverse/proiecte/pathfinding-visualizer/src/Components/PathfindingVisualizer.jsx"],"names":["React","Component","TNode","isStart","isFinish","PathfindingVisualizer","constructor","state","grid","startFinishIndexes","componentDidMount","getGrid","setState","onClick","row","col","newGrid","getNewGrid","node","render","map","rowIndex","nodeIndex","isVisited","i","currentRow","j","push","createNode","slice","newNode"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,KAAP,MAAkB,SAAlB;AACA,OAAO,aAAP;AAEA,IAAIC,OAAO,GAAG,IAAd;AACA,IAAIC,QAAQ,GAAG,KAAf;AAEA,eAAe,MAAMC,qBAAN,SAAoCJ,SAApC,CAA8C;AAC3DK,EAAAA,WAAW,GAAG;AACZ;AACA,SAAKC,KAAL,GAAa;AACXC,MAAAA,IAAI,EAAE,EADK;AAEXC,MAAAA,kBAAkB,EAAE,EAFT,CAGL;;AAHK,KAAb;AAKD;;AAEDC,EAAAA,iBAAiB,GAAG;AAClB,UAAMF,IAAI,GAAGG,OAAO,EAApB;AACA,SAAKC,QAAL,CAAc;AAAEJ,MAAAA;AAAF,KAAd;AACD;;AAEDK,EAAAA,OAAO,CAACC,GAAD,EAAMC,GAAN,EAAW;AAChB,QAAIZ,OAAO,IAAI,IAAX,IAAmBC,QAAQ,IAAI,KAAnC,EAA0C;AACxC,YAAMY,OAAO,GAAGC,UAAU,CAAC,KAAKV,KAAL,CAAWC,IAAZ,EAAkBM,GAAlB,EAAuBC,GAAvB,EAA4BZ,OAA5B,EAAqCC,QAArC,CAA1B;AACA,WAAKQ,QAAL,CAAc;AAAEJ,QAAAA,IAAI,EAAEQ;AAAR,OAAd;AACAb,MAAAA,OAAO,GAAG,KAAV;AACAC,MAAAA,QAAQ,GAAG,IAAX;AACD,KALD,MAKO,IAAID,OAAO,IAAI,KAAX,IAAoBC,QAAxB,EAAkC;AACvC,YAAMc,IAAI,GAAG,KAAKX,KAAL,CAAWC,IAAX,CAAgBM,GAAhB,EAAqBC,GAArB,CAAb;;AACA,UAAG,CAACG,IAAI,CAACf,OAAT,EAAkB;AAChB,cAAMa,OAAO,GAAGC,UAAU,CAAC,KAAKV,KAAL,CAAWC,IAAZ,EAAkBM,GAAlB,EAAuBC,GAAvB,EAA4BZ,OAA5B,EAAqCC,QAArC,CAA1B;AACA,aAAKQ,QAAL,CAAc;AAAEJ,UAAAA,IAAI,EAAEQ;AAAR,SAAd;AACAZ,QAAAA,QAAQ,GAAG,KAAX;AACD;AACF;AACF;;AAEDe,EAAAA,MAAM,GAAG;AACP,UAAM;AAAEX,MAAAA;AAAF,QAAW,KAAKD,KAAtB;AAEA,wBACE;AAAK,MAAA,SAAS,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGC,IAAI,CAACY,GAAL,CAAS,CAACN,GAAD,EAAMO,QAAN,KAAmB;AAC3B,0BACE;AAAK,QAAA,GAAG,EAAEA,QAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACGP,GAAG,CAACM,GAAJ,CAAQ,CAACF,IAAD,EAAOI,SAAP,KAAqB;AAC5B,cAAM;AAAER,UAAAA,GAAF;AAAOC,UAAAA,GAAP;AAAYZ,UAAAA,OAAZ;AAAqBC,UAAAA,QAArB;AAA+BmB,UAAAA;AAA/B,YAA6CL,IAAnD;AACA,4BACE,oBAAC,KAAD;AACE,UAAA,GAAG,EAAEI,SADP;AAEE,UAAA,GAAG,EAAER,GAFP;AAGE,UAAA,GAAG,EAAEC,GAHP;AAIE,UAAA,OAAO,EAAEZ,OAJX;AAKE,UAAA,QAAQ,EAAEC,QALZ;AAME,UAAA,SAAS,EAAEmB,SANb;AAOE,UAAA,OAAO,EAAE,CAACT,GAAD,EAAMC,GAAN,KAAc,KAAKF,OAAL,CAAaC,GAAb,EAAkBC,GAAlB,CAPzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAWD,OAbA,CADH,CADF;AAkBD,KAnBA,CADH,CADF;AAwBD;;AA1D0D;;AA6D7D,MAAMJ,OAAO,GAAG,MAAM;AACpB,QAAMH,IAAI,GAAG,EAAb;;AAEA,OAAK,IAAIgB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,EAApB,EAAwBA,CAAC,EAAzB,EAA6B;AAC3B,UAAMC,UAAU,GAAG,EAAnB;;AACA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,EAApB,EAAwBA,CAAC,EAAzB,EAA6B;AAC3BD,MAAAA,UAAU,CAACE,IAAX,CAAgBC,UAAU,CAACJ,CAAD,EAAIE,CAAJ,CAA1B;AACD;;AACDlB,IAAAA,IAAI,CAACmB,IAAL,CAAUF,UAAV;AACD;;AAED,SAAOjB,IAAP;AACD,CAZD;;AAcA,MAAMoB,UAAU,GAAG,CAACd,GAAD,EAAMC,GAAN,KAAc;AAC/B,SAAO;AACLD,IAAAA,GAAG,EAAEA,GADA;AAELC,IAAAA,GAAG,EAAEA,GAFA;AAGLZ,IAAAA,OAAO,EAAE,KAHJ;AAILC,IAAAA,QAAQ,EAAE,KAJL;AAKLmB,IAAAA,SAAS,EAAE;AALN,GAAP;AAOD,CARD;;AAUA,MAAMN,UAAU,GAAG,CAACT,IAAD,EAAOM,GAAP,EAAYC,GAAZ,EAAiBZ,OAAjB,EAA0BC,QAA1B,KAAuC;AACxD,MAAID,OAAJ,EAAa;AACX,UAAMa,OAAO,GAAGR,IAAI,CAACqB,KAAL,EAAhB;AACA,UAAMX,IAAI,GAAGF,OAAO,CAACF,GAAD,CAAP,CAAaC,GAAb,CAAb;AACA,UAAMe,OAAO,GAAG,EACd,GAAGZ,IADW;AAEdf,MAAAA,OAAO,EAAEA;AAFK,KAAhB;AAKAa,IAAAA,OAAO,CAACF,GAAD,CAAP,CAAaC,GAAb,IAAoBe,OAApB;AACA,WAAOd,OAAP;AACD;;AAED,MAAIZ,QAAJ,EAAc;AACZ,UAAMY,OAAO,GAAGR,IAAI,CAACqB,KAAL,EAAhB;AACA,UAAMX,IAAI,GAAGF,OAAO,CAACF,GAAD,CAAP,CAAaC,GAAb,CAAb;AACA,UAAMe,OAAO,GAAG,EACd,GAAGZ,IADW;AAEdd,MAAAA,QAAQ,EAAEA;AAFI,KAAhB;AAKAY,IAAAA,OAAO,CAACF,GAAD,CAAP,CAAaC,GAAb,IAAoBe,OAApB;AACA,WAAOd,OAAP;AACD;AACF,CAxBD","sourcesContent":["import React, { Component } from \"react\";\nimport TNode from \"./TNode\";\nimport \"../grid.css\";\n\nlet isStart = true;\nlet isFinish = false;\n\nexport default class PathfindingVisualizer extends Component {\n  constructor() {\n    super();\n    this.state = {\n      grid: [],\n      startFinishIndexes: [],\n            // mouseIsPressed: false\n    };\n  }\n\n  componentDidMount() {\n    const grid = getGrid();\n    this.setState({ grid });\n  }\n\n  onClick(row, col) {\n    if (isStart == true && isFinish == false) {\n      const newGrid = getNewGrid(this.state.grid, row, col, isStart, isFinish);\n      this.setState({ grid: newGrid });\n      isStart = false;\n      isFinish = true;\n    } else if (isStart == false && isFinish) {\n      const node = this.state.grid[row][col];\n      if(!node.isStart) {\n        const newGrid = getNewGrid(this.state.grid, row, col, isStart, isFinish);\n        this.setState({ grid: newGrid });\n        isFinish = false;\n      }\n    }\n  }\n\n  render() {\n    const { grid } = this.state;\n\n    return (\n      <div className=\"grid\">\n        {grid.map((row, rowIndex) => {\n          return (\n            <div key={rowIndex}>\n              {row.map((node, nodeIndex) => {\n                const { row, col, isStart, isFinish, isVisited } = node;\n                return (\n                  <TNode\n                    key={nodeIndex}\n                    row={row}\n                    col={col}\n                    isStart={isStart}\n                    isFinish={isFinish}\n                    isVisited={isVisited}\n                    onClick={(row, col) => this.onClick(row, col)}\n                  ></TNode>\n                );\n              })}\n            </div>\n          );\n        })}\n      </div>\n    );\n  }\n}\n\nconst getGrid = () => {\n  const grid = [];\n\n  for (let i = 0; i < 20; i++) {\n    const currentRow = [];\n    for (let j = 0; j < 50; j++) {\n      currentRow.push(createNode(i, j));\n    }\n    grid.push(currentRow);\n  }\n\n  return grid;\n};\n\nconst createNode = (row, col) => {\n  return {\n    row: row,\n    col: col,\n    isStart: false,\n    isFinish: false,\n    isVisited: false,\n  };\n};\n\nconst getNewGrid = (grid, row, col, isStart, isFinish) => {\n  if (isStart) {\n    const newGrid = grid.slice();\n    const node = newGrid[row][col];\n    const newNode = {\n      ...node,\n      isStart: isStart,\n    };\n\n    newGrid[row][col] = newNode;\n    return newGrid;\n  }\n\n  if (isFinish) {\n    const newGrid = grid.slice();\n    const node = newGrid[row][col];\n    const newNode = {\n      ...node,\n      isFinish: isFinish,\n    };\n\n    newGrid[row][col] = newNode;\n    return newGrid;\n  }\n};\n"]},"metadata":{},"sourceType":"module"}