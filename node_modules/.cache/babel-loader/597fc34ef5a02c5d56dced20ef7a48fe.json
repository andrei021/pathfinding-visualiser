{"ast":null,"code":"var _jsxFileName = \"/Users/andreimihai/Documents/proiecteDiverse/proiecte/pathfinding-visualizer/src/Components/PathfindingVisualizer.jsx\";\nimport React, { Component } from \"react\";\nimport TNode from \"./TNode\";\nimport \"../grid.css\";\nimport \"../message.css\";\nlet isStart = true;\nlet isFinish = false;\nexport default class PathfindingVisualizer extends Component {\n  constructor() {\n    super();\n    this.state = {\n      grid: [],\n      startFinishIndexes: [],\n      message: \"choose start node\",\n      buttonIsActive: \"false\" // mouseIsPressed: false\n\n    };\n  }\n\n  componentDidMount() {\n    const grid = getGrid();\n    this.setState({\n      grid\n    });\n  }\n\n  onClick(row, col) {\n    if (isStart == true && isFinish == false) {\n      this.state.startFinishIndexes.push(row);\n      this.state.startFinishIndexes.push(col);\n      const newGrid = getNewGrid(this.state.grid, row, col, isStart, isFinish);\n      this.setState({\n        grid: newGrid\n      });\n      isStart = false;\n      isFinish = true;\n      this.state.message = \"choose finish node\";\n    } else if (isStart == false && isFinish) {\n      const node = this.state.grid[row][col];\n      this.state.message = \"put walls if you want to\";\n\n      if (!node.isStart) {\n        this.state.startFinishIndexes.push(row);\n        this.state.startFinishIndexes.push(col);\n        const newGrid = getNewGrid(this.state.grid, row, col, isStart, isFinish);\n        this.setState({\n          grid: newGrid,\n          buttonIsActive: \"\"\n        });\n        isFinish = false;\n      }\n    }\n  }\n\n  render() {\n    const {\n      grid\n    } = this.state;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"message\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"code\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 11\n      }\n    }, this.state.message)), /*#__PURE__*/React.createElement(\"div\", {\n      disabled: this.state.buttonIsActive,\n      className: \"large blue button\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }\n    }, \"get path\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"grid\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }\n    }, grid.map((row, rowIndex) => {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        key: rowIndex,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 15\n        }\n      }, row.map((node, nodeIndex) => {\n        const {\n          row,\n          col,\n          isStart,\n          isFinish,\n          isVisited\n        } = node;\n        return /*#__PURE__*/React.createElement(TNode, {\n          key: nodeIndex,\n          row: row,\n          col: col,\n          isStart: isStart,\n          isFinish: isFinish,\n          isVisited: isVisited,\n          onClick: (row, col) => this.onClick(row, col),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 77,\n            columnNumber: 21\n          }\n        });\n      }));\n    })));\n  }\n\n}\n\nconst getGrid = () => {\n  const grid = [];\n\n  for (let i = 0; i < 20; i++) {\n    const currentRow = [];\n\n    for (let j = 0; j < 50; j++) {\n      currentRow.push(createNode(i, j));\n    }\n\n    grid.push(currentRow);\n  }\n\n  return grid;\n};\n\nconst createNode = (row, col) => {\n  return {\n    row: row,\n    col: col,\n    isStart: false,\n    isFinish: false,\n    isVisited: false\n  };\n};\n\nconst getNewGrid = (grid, row, col, isStart, isFinish) => {\n  if (isStart) {\n    const newGrid = grid.slice();\n    const node = newGrid[row][col];\n    const newNode = { ...node,\n      isStart: isStart\n    };\n    newGrid[row][col] = newNode;\n    return newGrid;\n  } // if (isFinish) {\n  //   const newGrid = grid.slice();\n  //   const node = newGrid[row][col];\n  //   const newNode = {\n  //     ...node,\n  //     isFinish: isFinish,\n  //   };\n  //   newGrid[row][col] = newNode;\n  //   return newGrid;\n  // }\n\n};","map":{"version":3,"sources":["/Users/andreimihai/Documents/proiecteDiverse/proiecte/pathfinding-visualizer/src/Components/PathfindingVisualizer.jsx"],"names":["React","Component","TNode","isStart","isFinish","PathfindingVisualizer","constructor","state","grid","startFinishIndexes","message","buttonIsActive","componentDidMount","getGrid","setState","onClick","row","col","push","newGrid","getNewGrid","node","render","map","rowIndex","nodeIndex","isVisited","i","currentRow","j","createNode","slice","newNode"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport TNode from \"./TNode\";\nimport \"../grid.css\";\nimport \"../message.css\";\n\nlet isStart = true;\nlet isFinish = false;\n\nexport default class PathfindingVisualizer extends Component {\n  constructor() {\n    super();\n    this.state = {\n      grid: [],\n      startFinishIndexes: [],\n      message: \"choose start node\",\n      buttonIsActive: \"false\",\n      // mouseIsPressed: false\n    };\n  }\n\n  componentDidMount() {\n    const grid = getGrid();\n    this.setState({ grid });\n  }\n\n  onClick(row, col) {\n    if (isStart == true && isFinish == false) {\n      this.state.startFinishIndexes.push(row);\n      this.state.startFinishIndexes.push(col);\n\n      const newGrid = getNewGrid(this.state.grid, row, col, isStart, isFinish);\n      this.setState({ grid: newGrid });\n\n      isStart = false;\n      isFinish = true;\n      this.state.message = \"choose finish node\";\n    } else if (isStart == false && isFinish) {\n      const node = this.state.grid[row][col];\n      this.state.message = \"put walls if you want to\";\n\n      if (!node.isStart) {\n        this.state.startFinishIndexes.push(row);\n        this.state.startFinishIndexes.push(col);\n        const newGrid = getNewGrid(\n          this.state.grid,\n          row,\n          col,\n          isStart,\n          isFinish\n        );\n        this.setState({ grid: newGrid, buttonIsActive: \"\" });\n        isFinish = false;\n      }\n    }\n  }\n\n  render() {\n    const { grid } = this.state;\n\n    return (\n      <div>\n        <div className=\"message\">\n          <code>{this.state.message}</code>\n        </div>\n\n        <div disabled={this.state.buttonIsActive} className=\"large blue button\">\n          get path\n        </div>\n\n        <div className=\"grid\">\n          {grid.map((row, rowIndex) => {\n            return (\n              <div key={rowIndex}>\n                {row.map((node, nodeIndex) => {\n                  const { row, col, isStart, isFinish, isVisited } = node;\n                  return (\n                    <TNode\n                      key={nodeIndex}\n                      row={row}\n                      col={col}\n                      isStart={isStart}\n                      isFinish={isFinish}\n                      isVisited={isVisited}\n                      onClick={(row, col) => this.onClick(row, col)}\n                    ></TNode>\n                  );\n                })}\n              </div>\n            );\n          })}\n        </div>\n      </div>\n    );\n  }\n}\n\nconst getGrid = () => {\n  const grid = [];\n\n  for (let i = 0; i < 20; i++) {\n    const currentRow = [];\n    for (let j = 0; j < 50; j++) {\n      currentRow.push(createNode(i, j));\n    }\n    grid.push(currentRow);\n  }\n\n  return grid;\n};\n\nconst createNode = (row, col) => {\n  return {\n    row: row,\n    col: col,\n    isStart: false,\n    isFinish: false,\n    isVisited: false,\n  };\n};\n\nconst getNewGrid = (grid, row, col, isStart, isFinish) => {\n  if (isStart) {\n    const newGrid = grid.slice();\n    const node = newGrid[row][col];\n    const newNode = {\n      ...node,\n      isStart: isStart,\n    };\n\n    newGrid[row][col] = newNode;\n    return newGrid;\n  }\n\n  // if (isFinish) {\n  //   const newGrid = grid.slice();\n  //   const node = newGrid[row][col];\n  //   const newNode = {\n  //     ...node,\n  //     isFinish: isFinish,\n  //   };\n\n  //   newGrid[row][col] = newNode;\n  //   return newGrid;\n  // }\n};"]},"metadata":{},"sourceType":"module"}