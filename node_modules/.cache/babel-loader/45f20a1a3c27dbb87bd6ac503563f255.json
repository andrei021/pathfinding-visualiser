{"ast":null,"code":"var _jsxFileName = \"/Users/andreimihai/Documents/proiecteDiverse/proiecte/pathfinding-visualizer/src/Components/PathfindingVisualizer.jsx\";\nimport React, { Component } from \"react\";\nimport TNode from \"./TNode\";\nimport \"../grid.css\";\nconst startX = 7;\nconst startY = 30;\nconst finishX = 25;\nconst finishY = 30;\nexport default class PathfindingVisualizer extends Component {\n  constructor() {\n    super();\n    this.setState = {\n      grid: []\n    };\n  }\n\n  componentDidMount() {\n    const grid = getGrid(); // this.setState({ grid });\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"grid\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 7\n      }\n    }, grid.map((row, rowIndex) => {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        key: rowIndex,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 28,\n          columnNumber: 13\n        }\n      }, row.map((node, nodeIndex) => {\n        const {\n          row,\n          col,\n          isStart,\n          isFinish,\n          isVisited\n        } = node;\n        return /*#__PURE__*/React.createElement(TNode, {\n          key: true,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 32,\n            columnNumber: 19\n          }\n        });\n      }));\n    }));\n  }\n\n}\n\nconst getGrid = () => {\n  const grid = [];\n\n  for (let i = 0; i < 30; i++) {\n    const currentRow = [];\n\n    for (let j = 0; j < 60; j++) {\n      currentRow.push(createNode(i, j));\n    }\n\n    grid.push(currentRow);\n  }\n\n  return grid;\n};\n\nconst createNode = (row, col) => {\n  return {\n    row: row,\n    col: col,\n    isStart: row == startX && col == startY,\n    isFinish: row == finishX && col == finishY,\n    isVisited: false\n  };\n};","map":{"version":3,"sources":["/Users/andreimihai/Documents/proiecteDiverse/proiecte/pathfinding-visualizer/src/Components/PathfindingVisualizer.jsx"],"names":["React","Component","TNode","startX","startY","finishX","finishY","PathfindingVisualizer","constructor","setState","grid","componentDidMount","getGrid","render","map","row","rowIndex","node","nodeIndex","col","isStart","isFinish","isVisited","i","currentRow","j","push","createNode"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,KAAP,MAAkB,SAAlB;AACA,OAAO,aAAP;AAEA,MAAMC,MAAM,GAAG,CAAf;AACA,MAAMC,MAAM,GAAG,EAAf;AACA,MAAMC,OAAO,GAAG,EAAhB;AACA,MAAMC,OAAO,GAAG,EAAhB;AAEA,eAAe,MAAMC,qBAAN,SAAoCN,SAApC,CAA8C;AAC3DO,EAAAA,WAAW,GAAG;AACZ;AACA,SAAKC,QAAL,GAAgB;AACdC,MAAAA,IAAI,EAAE;AADQ,KAAhB;AAGD;;AAEDC,EAAAA,iBAAiB,GAAG;AAClB,UAAMD,IAAI,GAAGE,OAAO,EAApB,CADkB,CAElB;AACD;;AAEDC,EAAAA,MAAM,GAAG;AACP,wBACE;AAAK,MAAA,SAAS,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGH,IAAI,CAACI,GAAL,CAAS,CAACC,GAAD,EAAMC,QAAN,KAAmB;AAC3B,0BACE;AAAK,QAAA,GAAG,EAAEA,QAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACGD,GAAG,CAACD,GAAJ,CAAQ,CAACG,IAAD,EAAOC,SAAP,KAAqB;AAC5B,cAAM;AAACH,UAAAA,GAAD;AAAMI,UAAAA,GAAN;AAAWC,UAAAA,OAAX;AAAoBC,UAAAA,QAApB;AAA8BC,UAAAA;AAA9B,YAA2CL,IAAjD;AACA,4BACE,oBAAC,KAAD;AACE,UAAA,GAAG,MADL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAMD,OARA,CADH,CADF;AAaD,KAdA,CADH,CADF;AAmBD;;AAjC0D;;AAoC7D,MAAML,OAAO,GAAG,MAAM;AACpB,QAAMF,IAAI,GAAG,EAAb;;AAEA,OAAK,IAAIa,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,EAApB,EAAwBA,CAAC,EAAzB,EAA6B;AAC3B,UAAMC,UAAU,GAAG,EAAnB;;AACA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,EAApB,EAAwBA,CAAC,EAAzB,EAA6B;AAC3BD,MAAAA,UAAU,CAACE,IAAX,CAAgBC,UAAU,CAACJ,CAAD,EAAIE,CAAJ,CAA1B;AACD;;AACDf,IAAAA,IAAI,CAACgB,IAAL,CAAUF,UAAV;AACD;;AAED,SAAOd,IAAP;AACD,CAZD;;AAcA,MAAMiB,UAAU,GAAG,CAACZ,GAAD,EAAMI,GAAN,KAAc;AAC/B,SAAO;AACLJ,IAAAA,GAAG,EAAEA,GADA;AAELI,IAAAA,GAAG,EAAEA,GAFA;AAGLC,IAAAA,OAAO,EAAEL,GAAG,IAAIZ,MAAP,IAAiBgB,GAAG,IAAIf,MAH5B;AAILiB,IAAAA,QAAQ,EAAEN,GAAG,IAAIV,OAAP,IAAkBc,GAAG,IAAIb,OAJ9B;AAKLgB,IAAAA,SAAS,EAAE;AALN,GAAP;AAOD,CARD","sourcesContent":["import React, { Component } from \"react\";\nimport TNode from \"./TNode\";\nimport \"../grid.css\";\n\nconst startX = 7;\nconst startY = 30;\nconst finishX = 25;\nconst finishY = 30;\n\nexport default class PathfindingVisualizer extends Component {\n  constructor() {\n    super();\n    this.setState = {\n      grid: [],\n    };\n  }\n\n  componentDidMount() {\n    const grid = getGrid();\n    // this.setState({ grid });\n  }\n\n  render() {\n    return (\n      <div className=\"grid\">\n        {grid.map((row, rowIndex) => {\n          return (\n            <div key={rowIndex}>\n              {row.map((node, nodeIndex) => {\n                const {row, col, isStart, isFinish, isVisited} = node;\n                return (\n                  <TNode\n                    key>\n\n                  </TNode>\n                );\n              })}\n            </div>\n            );\n        })}\n      </div>\n    );\n  }\n}\n\nconst getGrid = () => {\n  const grid = [];\n\n  for (let i = 0; i < 30; i++) {\n    const currentRow = [];\n    for (let j = 0; j < 60; j++) {\n      currentRow.push(createNode(i, j));\n    }\n    grid.push(currentRow);\n  }\n\n  return grid;\n};\n\nconst createNode = (row, col) => {\n  return {\n    row: row,\n    col: col,\n    isStart: row == startX && col == startY,\n    isFinish: row == finishX && col == finishY,\n    isVisited: false\n  };\n};\n"]},"metadata":{},"sourceType":"module"}