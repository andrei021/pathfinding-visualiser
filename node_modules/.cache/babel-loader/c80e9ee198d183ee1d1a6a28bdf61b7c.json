{"ast":null,"code":"// Returns all nodes in the order in which they were visited. \n// Also makes nodes point back to their previous node, \n// allowing us to compute the shortest path by backtracking \n// from the finish node.\nexport function dijkstra(grid, startNode, finishNode) {\n  startNode.distance = 0;\n  const visitedNodesInOrder = [];\n  const unvisitedNodes = getNodes(grid);\n}\n\nfunction getNodes(grid) {\n  nodes = [];\n\n  for (let i = 0; i < grid.length; i++) {\n    currentRow = grid[i];\n\n    for (let j = 0; j < currentRow.length; j++) {\n      nodes.push(currentRow[j]);\n    }\n  }\n}","map":{"version":3,"sources":["/Users/andreimihai/Documents/proiecteDiverse/proiecte/pathfinding-visualizer/src/Algorithms/Dijkstra.js"],"names":["dijkstra","grid","startNode","finishNode","distance","visitedNodesInOrder","unvisitedNodes","getNodes","nodes","i","length","currentRow","j","push"],"mappings":"AAAA;AACA;AACA;AACA;AACA,OAAO,SAASA,QAAT,CAAkBC,IAAlB,EAAwBC,SAAxB,EAAmCC,UAAnC,EAA+C;AAClDD,EAAAA,SAAS,CAACE,QAAV,GAAqB,CAArB;AACA,QAAMC,mBAAmB,GAAG,EAA5B;AACA,QAAMC,cAAc,GAAGC,QAAQ,CAACN,IAAD,CAA/B;AACH;;AAED,SAASM,QAAT,CAAkBN,IAAlB,EAAwB;AACpBO,EAAAA,KAAK,GAAG,EAAR;;AACA,OAAI,IAAIC,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGR,IAAI,CAACS,MAAxB,EAAgCD,CAAC,EAAjC,EAAqC;AACjCE,IAAAA,UAAU,GAAGV,IAAI,CAACQ,CAAD,CAAjB;;AACA,SAAI,IAAIG,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGD,UAAU,CAACD,MAA9B,EAAsCE,CAAC,EAAvC,EAA2C;AACvCJ,MAAAA,KAAK,CAACK,IAAN,CAAWF,UAAU,CAACC,CAAD,CAArB;AACH;AACJ;AACJ","sourcesContent":["// Returns all nodes in the order in which they were visited. \n// Also makes nodes point back to their previous node, \n// allowing us to compute the shortest path by backtracking \n// from the finish node.\nexport function dijkstra(grid, startNode, finishNode) {\n    startNode.distance = 0;\n    const visitedNodesInOrder = [];\n    const unvisitedNodes = getNodes(grid);\n}\n\nfunction getNodes(grid) {\n    nodes = [];\n    for(let i = 0; i < grid.length; i++) {\n        currentRow = grid[i];\n        for(let j = 0; j < currentRow.length; j++) {\n            nodes.push(currentRow[j])\n        }\n    }\n} \n"]},"metadata":{},"sourceType":"module"}