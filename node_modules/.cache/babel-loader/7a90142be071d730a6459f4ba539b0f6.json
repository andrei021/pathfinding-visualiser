{"ast":null,"code":"var _jsxFileName = \"/Users/andreimihai/Documents/proiecteDiverse/proiecte/pathfinding-visualizer/src/Components/PathfindingVisualizer.jsx\";\nimport React, { Component } from \"react\";\nimport TNode from \"./TNode\";\nimport \"../grid.css\";\nconst startRow = 9;\nconst startCol = 9;\nconst finishRow = 9;\nconst finishCol = 40;\nexport default class PathfindingVisualizer extends Component {\n  constructor() {\n    super();\n    this.state = {\n      grid: []\n    };\n  }\n\n  componentDidMount() {\n    const grid = getGrid();\n    this.setState({\n      grid\n    });\n  }\n\n  render() {\n    const {\n      grid\n    } = this.state;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"grid\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 7\n      }\n    }, grid.map((row, rowIndex) => {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        key: rowIndex,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 32,\n          columnNumber: 13\n        }\n      }, row.map((node, nodeIndex) => {\n        const {\n          row,\n          col,\n          isStart,\n          isFinish,\n          isVisited\n        } = node;\n        return /*#__PURE__*/React.createElement(TNode, {\n          key: nodeIndex,\n          row: row,\n          col: col,\n          isStart: isStart,\n          isFinish: isFinish,\n          isVisited: isVisited,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 36,\n            columnNumber: 19\n          }\n        });\n      }));\n    }));\n  }\n\n}\n\nconst getGrid = () => {\n  const grid = [];\n\n  for (let i = 0; i < 20; i++) {\n    const currentRow = [];\n\n    for (let j = 0; j < 50; j++) {\n      currentRow.push(createNode(i, j));\n    }\n\n    grid.push(currentRow);\n  }\n\n  return grid;\n};\n\nconst createNode = (row, col) => {\n  return {\n    row: row,\n    col: col,\n    isStart: row == startRow && col == startCol,\n    isFinish: row == finishRow && col == finishCol,\n    isVisited: false\n  };\n};","map":{"version":3,"sources":["/Users/andreimihai/Documents/proiecteDiverse/proiecte/pathfinding-visualizer/src/Components/PathfindingVisualizer.jsx"],"names":["React","Component","TNode","startRow","startCol","finishRow","finishCol","PathfindingVisualizer","constructor","state","grid","componentDidMount","getGrid","setState","render","map","row","rowIndex","node","nodeIndex","col","isStart","isFinish","isVisited","i","currentRow","j","push","createNode"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,KAAP,MAAkB,SAAlB;AACA,OAAO,aAAP;AAEA,MAAMC,QAAQ,GAAG,CAAjB;AACA,MAAMC,QAAQ,GAAG,CAAjB;AACA,MAAMC,SAAS,GAAG,CAAlB;AACA,MAAMC,SAAS,GAAG,EAAlB;AAEA,eAAe,MAAMC,qBAAN,SAAoCN,SAApC,CAA8C;AAC3DO,EAAAA,WAAW,GAAG;AACZ;AACA,SAAKC,KAAL,GAAa;AACXC,MAAAA,IAAI,EAAE;AADK,KAAb;AAGD;;AAEDC,EAAAA,iBAAiB,GAAG;AAClB,UAAMD,IAAI,GAAGE,OAAO,EAApB;AACA,SAAKC,QAAL,CAAc;AAAEH,MAAAA;AAAF,KAAd;AACD;;AAIDI,EAAAA,MAAM,GAAG;AACP,UAAM;AAACJ,MAAAA;AAAD,QAAS,KAAKD,KAApB;AAEA,wBACE;AAAK,MAAA,SAAS,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGC,IAAI,CAACK,GAAL,CAAS,CAACC,GAAD,EAAMC,QAAN,KAAmB;AAC3B,0BACE;AAAK,QAAA,GAAG,EAAEA,QAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACGD,GAAG,CAACD,GAAJ,CAAQ,CAACG,IAAD,EAAOC,SAAP,KAAqB;AAC5B,cAAM;AAAEH,UAAAA,GAAF;AAAOI,UAAAA,GAAP;AAAYC,UAAAA,OAAZ;AAAqBC,UAAAA,QAArB;AAA+BC,UAAAA;AAA/B,YAA6CL,IAAnD;AACA,4BACE,oBAAC,KAAD;AACE,UAAA,GAAG,EAAEC,SADP;AAEE,UAAA,GAAG,EAAEH,GAFP;AAGE,UAAA,GAAG,EAAEI,GAHP;AAIE,UAAA,OAAO,EAAEC,OAJX;AAKE,UAAA,QAAQ,EAAEC,QALZ;AAME,UAAA,SAAS,EAAEC,SANb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAUD,OAZA,CADH,CADF;AAiBD,KAlBA,CADH,CADF;AAuBD;;AAzC0D;;AA4C7D,MAAMX,OAAO,GAAG,MAAM;AACpB,QAAMF,IAAI,GAAG,EAAb;;AAEA,OAAK,IAAIc,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,EAApB,EAAwBA,CAAC,EAAzB,EAA6B;AAC3B,UAAMC,UAAU,GAAG,EAAnB;;AACA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,EAApB,EAAwBA,CAAC,EAAzB,EAA6B;AAC3BD,MAAAA,UAAU,CAACE,IAAX,CAAgBC,UAAU,CAACJ,CAAD,EAAIE,CAAJ,CAA1B;AACD;;AACDhB,IAAAA,IAAI,CAACiB,IAAL,CAAUF,UAAV;AACD;;AAED,SAAOf,IAAP;AACD,CAZD;;AAcA,MAAMkB,UAAU,GAAG,CAACZ,GAAD,EAAMI,GAAN,KAAc;AAC/B,SAAO;AACLJ,IAAAA,GAAG,EAAEA,GADA;AAELI,IAAAA,GAAG,EAAEA,GAFA;AAGLC,IAAAA,OAAO,EAAEL,GAAG,IAAIb,QAAP,IAAmBiB,GAAG,IAAIhB,QAH9B;AAILkB,IAAAA,QAAQ,EAAEN,GAAG,IAAIX,SAAP,IAAoBe,GAAG,IAAId,SAJhC;AAKLiB,IAAAA,SAAS,EAAE;AALN,GAAP;AAOD,CARD","sourcesContent":["import React, { Component } from \"react\";\nimport TNode from \"./TNode\";\nimport \"../grid.css\";\n\nconst startRow = 9;\nconst startCol = 9;\nconst finishRow = 9;\nconst finishCol = 40;\n\nexport default class PathfindingVisualizer extends Component {\n  constructor() {\n    super();\n    this.state = {\n      grid: []\n    };\n  }\n\n  componentDidMount() {\n    const grid = getGrid();\n    this.setState({ grid });\n  }\n\n  handleMouse\n\n  render() {\n    const {grid} = this.state;\n\n    return (\n      <div className=\"grid\">\n        {grid.map((row, rowIndex) => {\n          return (\n            <div key={rowIndex}>\n              {row.map((node, nodeIndex) => {\n                const { row, col, isStart, isFinish, isVisited } = node;\n                return (\n                  <TNode\n                    key={nodeIndex}\n                    row={row}\n                    col={col}\n                    isStart={isStart}\n                    isFinish={isFinish}\n                    isVisited={isVisited}\n                  ></TNode>\n                );\n              })}\n            </div>\n          );\n        })}\n      </div>\n    );\n  }\n}\n\nconst getGrid = () => {\n  const grid = [];\n\n  for (let i = 0; i < 20; i++) {\n    const currentRow = [];\n    for (let j = 0; j < 50; j++) {\n      currentRow.push(createNode(i, j));\n    }\n    grid.push(currentRow);\n  }\n\n  return grid;\n};\n\nconst createNode = (row, col) => {\n  return {\n    row: row,\n    col: col,\n    isStart: row == startRow && col == startCol,\n    isFinish: row == finishRow && col == finishCol,\n    isVisited: false,\n  };\n};"]},"metadata":{},"sourceType":"module"}