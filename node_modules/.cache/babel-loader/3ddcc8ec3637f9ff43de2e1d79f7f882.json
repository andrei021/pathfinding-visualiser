{"ast":null,"code":"var _jsxFileName = \"/Users/andreimihai/Documents/proiecteDiverse/proiecte/pathfinding-visualizer/src/Components/PathfindingVisualizer.jsx\";\nimport React, { Component } from \"react\";\nimport TNode from \"./TNode\";\nimport \"../grid.css\";\nimport \"../message.css\";\nimport { dijkstra, getNodesInShortestPathOrder } from \"../Algorithms/Dijkstra\";\nlet isStart = true;\nlet isFinish = false;\nexport default class PathfindingVisualizer extends Component {\n  constructor() {\n    super();\n    this.state = {\n      grid: [],\n      startFinishIndexes: [],\n      message: \"choose start node\",\n      buttonIsActive: \"false\",\n      mouseIsPressed: false\n    };\n  }\n\n  componentDidMount() {\n    const grid = getGrid();\n    this.setState({\n      grid\n    });\n  }\n\n  onMouseDown(row, col) {\n    let indexesLength = this.state.startFinishIndexes.length;\n    if (indexesLength != 4) return;\n    const node = this.state.grid[row][col];\n    if (node.isStart || node.isFinish) return;\n    const newGrid = getNewGrid(this.state.grid, row, col, \"isWall\");\n    this.setState({\n      grid: newGrid,\n      mouseIsPressed: true\n    });\n  }\n\n  onMouseEnter(row, col) {\n    if (!this.state.mouseIsPressed) return;\n    const node = this.state.grid[row][col];\n    if (node.isStart || node.isFinish) return;\n    const newGrid = getNewGrid(this.state.grid, row, col, \"isWall\");\n    this.setState({\n      grid: newGrid\n    });\n  }\n\n  onMouseUp() {\n    this.setState({\n      mouseIsPressed: false\n    });\n  }\n\n  onClick(row, col) {\n    if (isStart == true && isFinish == false) {\n      this.state.startFinishIndexes.push(row);\n      this.state.startFinishIndexes.push(col);\n      const newGrid = getNewGrid(this.state.grid, row, col, \"isStart\");\n      this.setState({\n        grid: newGrid\n      });\n      isStart = false;\n      isFinish = true;\n      this.state.message = \"choose finish node\";\n    } else if (isStart == false && isFinish) {\n      const node = this.state.grid[row][col];\n      this.state.message = \"put walls if you want to; u can also keep the mouse clicked\";\n\n      if (!node.isStart) {\n        this.state.startFinishIndexes.push(row);\n        this.state.startFinishIndexes.push(col);\n        const newGrid = getNewGrid(this.state.grid, row, col, \"isFinish\");\n        this.setState({\n          grid: newGrid,\n          buttonIsActive: \"\"\n        });\n        isFinish = false;\n      }\n    }\n  }\n\n  visualizeDijkstra() {\n    const {\n      grid,\n      startFinishIndexes\n    } = this.state;\n    const startNodeRow = startFinishIndexes[0];\n    const startNodeCol = startFinishIndexes[1];\n    const finishNodeRow = startFinishIndexes[2];\n    const finishNodeCol = startFinishIndexes[3];\n    const startNode = grid[startNodeRow][startNodeCol];\n    const finishNode = grid[finishNodeRow][finishNodeCol];\n    const visitedNodesInOrder = dijkstra(grid, startNode, finishNode);\n    const nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode);\n    this.animateDijkstra(visitedNodesInOrder, nodesInShortestPathOrder);\n  }\n\n  render() {\n    const {\n      grid,\n      mouseIsPressed\n    } = this.state;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"message\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"code\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 11\n      }\n    }, this.state.message)), /*#__PURE__*/React.createElement(\"div\", {\n      disabled: this.state.buttonIsActive,\n      className: \"large blue button\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 9\n      }\n    }, \"get shortest path\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"grid\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 9\n      }\n    }, grid.map((row, rowIndex) => {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        key: rowIndex,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 15\n        }\n      }, row.map((node, nodeIndex) => {\n        const {\n          row,\n          col,\n          isStart,\n          isFinish,\n          isVisited,\n          isWall\n        } = node;\n        return /*#__PURE__*/React.createElement(TNode, {\n          key: nodeIndex,\n          row: row,\n          col: col,\n          isStart: isStart,\n          isFinish: isFinish,\n          isVisited: isVisited,\n          isWall: isWall,\n          mouseIsPressed: mouseIsPressed,\n          onClick: (row, col) => this.onClick(row, col),\n          onMouseDown: (row, col) => this.onMouseDown(row, col),\n          onMouseEnter: (row, col) => this.onMouseEnter(row, col),\n          onMouseUp: () => {\n            this.onMouseUp();\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 121,\n            columnNumber: 21\n          }\n        });\n      }));\n    })));\n  }\n\n}\n\nconst getGrid = () => {\n  const grid = [];\n\n  for (let i = 0; i < 20; i++) {\n    const currentRow = [];\n\n    for (let j = 0; j < 50; j++) {\n      currentRow.push(createNode(i, j));\n    }\n\n    grid.push(currentRow);\n  }\n\n  return grid;\n};\n\nconst createNode = (row, col) => {\n  return {\n    row: row,\n    col: col,\n    isStart: false,\n    isFinish: false,\n    isVisited: false,\n    isWall: false,\n    prevNode: null,\n    distance: Number.POSITIVE_INFINITY\n  };\n};\n\nconst getNewGrid = (grid, row, col, prop) => {\n  const newGrid = grid.slice();\n  const node = newGrid[row][col];\n  const newNode = { ...node\n  };\n  newNode[prop] = true;\n  newGrid[row][col] = newNode;\n  return newGrid;\n};","map":{"version":3,"sources":["/Users/andreimihai/Documents/proiecteDiverse/proiecte/pathfinding-visualizer/src/Components/PathfindingVisualizer.jsx"],"names":["React","Component","TNode","dijkstra","getNodesInShortestPathOrder","isStart","isFinish","PathfindingVisualizer","constructor","state","grid","startFinishIndexes","message","buttonIsActive","mouseIsPressed","componentDidMount","getGrid","setState","onMouseDown","row","col","indexesLength","length","node","newGrid","getNewGrid","onMouseEnter","onMouseUp","onClick","push","visualizeDijkstra","startNodeRow","startNodeCol","finishNodeRow","finishNodeCol","startNode","finishNode","visitedNodesInOrder","nodesInShortestPathOrder","animateDijkstra","render","map","rowIndex","nodeIndex","isVisited","isWall","i","currentRow","j","createNode","prevNode","distance","Number","POSITIVE_INFINITY","prop","slice","newNode"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport TNode from \"./TNode\";\nimport \"../grid.css\";\nimport \"../message.css\";\nimport { dijkstra, getNodesInShortestPathOrder } from \"../Algorithms/Dijkstra\";\n\nlet isStart = true;\nlet isFinish = false;\n\nexport default class PathfindingVisualizer extends Component {\n  constructor() {\n    super();\n    this.state = {\n      grid: [],\n      startFinishIndexes: [],\n      message: \"choose start node\",\n      buttonIsActive: \"false\",\n      mouseIsPressed: false,\n    };\n  }\n\n  componentDidMount() {\n    const grid = getGrid();\n    this.setState({ grid });\n  }\n\n  onMouseDown(row, col) {\n    let indexesLength = this.state.startFinishIndexes.length;\n    if (indexesLength != 4) return;\n\n    const node = this.state.grid[row][col];\n    if (node.isStart || node.isFinish) return;\n\n    const newGrid = getNewGrid(this.state.grid, row, col, \"isWall\");\n    this.setState({ grid: newGrid, mouseIsPressed: true });\n  }\n\n  onMouseEnter(row, col) {\n    if (!this.state.mouseIsPressed) return;\n\n    const node = this.state.grid[row][col];\n    if (node.isStart || node.isFinish) return;\n\n    const newGrid = getNewGrid(this.state.grid, row, col, \"isWall\");\n    this.setState({ grid: newGrid });\n  }\n\n  onMouseUp() {\n    this.setState({ mouseIsPressed: false });\n  }\n\n  onClick(row, col) {\n    if (isStart == true && isFinish == false) {\n      this.state.startFinishIndexes.push(row);\n      this.state.startFinishIndexes.push(col);\n\n      const newGrid = getNewGrid(this.state.grid, row, col, \"isStart\");\n      this.setState({ grid: newGrid });\n\n      isStart = false;\n      isFinish = true;\n      this.state.message = \"choose finish node\";\n    } else if (isStart == false && isFinish) {\n      const node = this.state.grid[row][col];\n      this.state.message =\n        \"put walls if you want to; u can also keep the mouse clicked\";\n\n      if (!node.isStart) {\n        this.state.startFinishIndexes.push(row);\n        this.state.startFinishIndexes.push(col);\n        const newGrid = getNewGrid(this.state.grid, row, col, \"isFinish\");\n        this.setState({ grid: newGrid, buttonIsActive: \"\" });\n        isFinish = false;\n      }\n    }\n  }\n\n  visualizeDijkstra() {\n    const { grid, startFinishIndexes } = this.state;\n\n    const startNodeRow = startFinishIndexes[0];\n    const startNodeCol = startFinishIndexes[1];\n    const finishNodeRow = startFinishIndexes[2];\n    const finishNodeCol = startFinishIndexes[3];\n\n    const startNode = grid[startNodeRow][startNodeCol];\n    const finishNode = grid[finishNodeRow][finishNodeCol];\n\n    const visitedNodesInOrder = dijkstra(grid, startNode, finishNode);\n    const nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode);\n    this.animateDijkstra(visitedNodesInOrder, nodesInShortestPathOrder);\n  }\n\n  render() {\n    const { grid, mouseIsPressed } = this.state;\n\n    return (\n      <div>\n        <div className=\"message\">\n          <code>{this.state.message}</code>\n        </div>\n\n        <div disabled={this.state.buttonIsActive} className=\"large blue button\">\n          get shortest path\n        </div>\n\n        <div className=\"grid\">\n          {grid.map((row, rowIndex) => {\n            return (\n              <div key={rowIndex}>\n                {row.map((node, nodeIndex) => {\n                  const {\n                    row,\n                    col,\n                    isStart,\n                    isFinish,\n                    isVisited,\n                    isWall,\n                  } = node;\n                  return (\n                    <TNode\n                      key={nodeIndex}\n                      row={row}\n                      col={col}\n                      isStart={isStart}\n                      isFinish={isFinish}\n                      isVisited={isVisited}\n                      isWall={isWall}\n                      mouseIsPressed={mouseIsPressed}\n                      onClick={(row, col) => this.onClick(row, col)}\n                      onMouseDown={(row, col) => this.onMouseDown(row, col)}\n                      onMouseEnter={(row, col) => this.onMouseEnter(row, col)}\n                      onMouseUp={() => {\n                        this.onMouseUp();\n                      }}\n                    ></TNode>\n                  );\n                })}\n              </div>\n            );\n          })}\n        </div>\n      </div>\n    );\n  }\n}\n\nconst getGrid = () => {\n  const grid = [];\n\n  for (let i = 0; i < 20; i++) {\n    const currentRow = [];\n    for (let j = 0; j < 50; j++) {\n      currentRow.push(createNode(i, j));\n    }\n    grid.push(currentRow);\n  }\n\n  return grid;\n};\n\nconst createNode = (row, col) => {\n  return {\n    row: row,\n    col: col,\n    isStart: false,\n    isFinish: false,\n    isVisited: false,\n    isWall: false,\n    prevNode: null,\n    distance: Number.POSITIVE_INFINITY,\n  };\n};\n\nconst getNewGrid = (grid, row, col, prop) => {\n  const newGrid = grid.slice();\n  const node = newGrid[row][col];\n  const newNode = {\n    ...node,\n  };\n\n  newNode[prop] = true;\n  newGrid[row][col] = newNode;\n  return newGrid;\n};\n"]},"metadata":{},"sourceType":"module"}